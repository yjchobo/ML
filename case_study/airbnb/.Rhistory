library(ggplot2)
temp <- col %>% select(PERSONS.KILLED,PERSONS.INJURED,VEHICLE.1.FACTOR,VEHICLE.2.FACTOR,VEHICLE.3.FACTOR,VEHICLE.4.FACTOR,VEHICLE.5.FACTOR,DATE) %>% gather(type,value,1:2) %>% gather(vehicle_type,cause,1:5) %>% filter(value!=0,cause!="",cause!="Unspecified")
temp_1 <- temp %>% select(-vehicle_type) %>% group_by(type,cause,DATE) %>% summarise(total=sum(value,na.rm=T))
theme_set(theme_bw())
g<- ggplot(data = temp_1, aes(x = cause, y = log(total), fill = type,frame=DATE)) +
geom_bar(data = subset(temp_1, type=="PERSONS.INJURED"),
stat = "identity",position = "identity") +
geom_bar(data = subset(temp_1, type=="PERSONS.KILLED"),
stat = "identity",
position = "identity",
mapping = aes(y = -log(total))) +
scale_y_continuous(labels = abs) +
coord_flip()+ggtitle('Causes of Accidents')
gganimate(g,"bar_graph.mp4")
library(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
install.packages('gifski')
library('gifski')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
install.packages('png')
library(png)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
gganimate(g,"bar_graph.mp4")
View(g)
gganimate(g)
View(temp_1)
ggplot(data = temp_1, aes(x = cause, y = log(total), fill = type,frame=DATE)) +
geom_bar(data = subset(temp_1, type=="PERSONS.INJURED"), stat = "identity",position = "identity") +
geom_bar(data = subset(temp_1, type=="PERSONS.KILLED"), stat = "identity",position = "identity", mapping = aes(y = -log(total))) + scale_y_continuous(labels = abs) + coord_flip()+ggtitle('Causes of Accidents')
ggplot(data = temp_1, aes(x = cause, y = log(total), fill = type,frame=DATE)) +
geom_bar(data = subset(temp_1, type=="PERSONS.INJURED"), stat = "identity",position = "identity") +
geom_bar(data = subset(temp_1, type=="PERSONS.KILLED"), stat = "identity",position = "identity", mapping = aes(y = -log(total))) + scale_y_continuous(labels = abs) + coord_flip()+ggtitle('Causes of Accidents') +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(Day) +
ease_aes('linear')
ggplot(data = temp_1, aes(x = cause, y = log(total), fill = type,frame=DATE)) +
geom_bar(data = subset(temp_1, type=="PERSONS.INJURED"), stat = "identity",position = "identity") +
geom_bar(data = subset(temp_1, type=="PERSONS.KILLED"), stat = "identity",position = "identity", mapping = aes(y = -log(total))) + scale_y_continuous(labels = abs) + coord_flip()+ggtitle('Causes of Accidents') +
# Here comes the gganimate specific bits
labs(title = 'Year: ', x = 'X', y = 'Y') +
transition_time(DATE) +
ease_aes('linear')
temp <- col %>% select(BOROUGH,DATE,MOTORISTS.INJURED,CYCLISTS.INJURED,PEDESTRIANS.INJURED,day,hour) %>% gather(type,value,3:5) %>% group_by(BOROUGH,type,day,hour) %>% summarise(n=sum(value,na.rm=T))
temp <- filter(temp,BOROUGH!="")
p <-ggplot(temp,aes(day,hour,fill=(n)))+
geom_tile(color= "white",size=0.1) +
scale_fill_viridis(name="Mean Injury by Type",option ="C")
p <-p + facet_grid(BOROUGH~type)
p <-p + scale_y_continuous(trans = "reverse", breaks = c(0,4,8,12,16,20))
#p <-p + scale_x_continuous(breaks =c(1,10,20,31))
p <-p + theme_minimal(base_size = 8)
p <-p + labs(title= paste("Total Hourly Injuries Due to Accidents"), x="Day", y="Hour")
p <-p + theme(legend.position = "bottom")+
theme(plot.title=element_text(size = 14))+
theme(axis.text.y=element_text(size=6)) +
theme(strip.background = element_rect(colour="gray"))+
theme(plot.title=element_text(hjust=0))+
theme(axis.ticks=element_blank())+
theme(axis.text=element_text(size=7))+
theme(legend.title=element_text(size=8))+
theme(legend.text=element_text(size=6))+
theme(plot.title=element_text(size=18),axis.text.x = element_text(angle=90, vjust=1))
(p)
p <- col %>% select(BOROUGH,DATE,MOTORISTS.INJURED,CYCLISTS.INJURED,PEDESTRIANS.INJURED) %>% gather(type,value,3:5) %>% group_by(BOROUGH,type,DATE) %>% summarise(n=sum(value,na.rm=T)) %>% filter(BOROUGH!="") %>%
ggplot(aes(x=DATE,y=n,colour=type)) + geom_line() + geom_point(size=2,shape=1)+
facet_grid(BOROUGH ~ .)+ggtitle("Number of Injuries by Type (Time Series)")
(p)
temp <- col %>% select(BOROUGH,DATE,MOTORISTS.KILLED,CYCLISTS.KILLED,PEDESTRIANS.KILLED,day,hour) %>% gather(type,value,3:5) %>% group_by(BOROUGH,type,day,hour) %>% summarise(n=sum(value,na.rm=T))
temp <- filter(temp,BOROUGH!="")
p <-ggplot(temp,aes(day,hour,fill=(n)))+
geom_tile(color= "white",size=0.1) +
scale_fill_viridis(name="Total Injury by Type",option ="C")
p <-p + facet_grid(BOROUGH~type)
p <-p + scale_y_continuous(trans = "reverse", breaks = c(0,4,8,12,16,20))
#p <-p + scale_x_continuous(breaks =c(1,10,20,31))
p <-p + theme_minimal(base_size = 8)
p <-p + labs(title= paste("Total Hourly Deaths Due to Accidents"), x="Day", y="Hour")
p <-p + theme(legend.position = "bottom")+
theme(plot.title=element_text(size = 14))+
theme(axis.text.y=element_text(size=6)) +
theme(strip.background = element_rect(colour="gray"))+
theme(plot.title=element_text(hjust=0))+
theme(axis.ticks=element_blank())+
theme(axis.text=element_text(size=7))+
theme(legend.title=element_text(size=8))+
theme(legend.text=element_text(size=6))+
theme(plot.title=element_text(size=18),axis.text.x = element_text(angle=90, vjust=1))
(p)
p <- col %>% select(BOROUGH,DATE,MOTORISTS.KILLED,CYCLISTS.KILLED,PEDESTRIANS.KILLED) %>% gather(type,value,3:5) %>% group_by(BOROUGH,type,DATE) %>% summarise(n=sum(value,na.rm=T)) %>% filter(BOROUGH!="") %>%
ggplot(aes(x=DATE,y=n,colour=type)) + geom_line() + geom_point(size=2,shape=1)+
facet_grid(BOROUGH ~ .)+ggtitle("Number of Deaths by Type (Time Series)")
p
library(ggmap)
install.packages(ggmap)
install.packages("ggmap")
library(ggmap)
df <- col %>% select(LATITUDE,LONGITUDE,PEDESTRIANS.INJURED,CYCLISTS.INJURED,MOTORISTS.INJURED) %>% gather(type,value,3:5) %>% na.omit() %>% group_by(LATITUDE,LONGITUDE,type) %>% summarise(total=sum(value,na.rm=T)) %>% filter(total!=0)
nyc <- get_map("new york",zoom=10)
?register_google
ggmap_show_api_key()
knitr::include_graphics("C:/Users/yocho/Documents/young_cho_non_work/kaggle/vehicle_collision/p4.png")
temp <- col %>% select(PERSONS.KILLED,PERSONS.INJURED,VEHICLE.1.FACTOR,VEHICLE.2.FACTOR,VEHICLE.3.FACTOR,VEHICLE.4.FACTOR,VEHICLE.5.FACTOR,DATE) %>% gather(type,value,1:2) %>% gather(vehicle_type,cause,1:5) %>% filter(value!=0,cause!="",cause!="Unspecified")
temp_1 <- temp %>% select(-vehicle_type) %>% group_by(type,cause,DATE) %>% summarise(total=sum(value,na.rm=T))
theme_set(theme_bw())
ggplot(data = temp_1, aes(x = cause, y = log(total), fill = type,frame=DATE)) +
geom_bar(data = subset(temp_1, type=="PERSONS.INJURED"), stat = "identity",position = "identity") +
geom_bar(data = subset(temp_1, type=="PERSONS.KILLED"), stat = "identity",position = "identity", mapping = aes(y = -log(total))) + scale_y_continuous(labels = abs) + coord_flip()+ggtitle('Causes of Accidents') +
# Here comes the gganimate specific bits
labs(title = 'Year: ', x = 'X', y = 'Y') +
transition_time(DATE) +
ease_aes('linear')
knitr::include_graphics("C:/Users/yocho/Documents/young_cho_non_work/kaggle/vehicle_collision/file3180a241b71.gif")
knitr::include_graphics("C:/Users/yocho/Documents/young_cho_non_work/kaggle/vehicle_collision/p5.gif")
knitr::include_graphics("C:/Users/yocho/Documents/young_cho_non_work/kaggle/vehicle_collision/p5.gif")
packages.required = c("plotly","highcharter","lubridate","ggthemes","tidyr","viridis","dplyr","magrittr")
lapply(packages.required, library, character.only = TRUE)
install.packages("HSAUR3")
library("HSAUR3")
data("weightgain", package = "HSAUR3")
head(weightgain)
View(weightgain)
View(weightgain)
head(weightgain[19:23,], n=5)
list(weightgain$source, weightgain$type)
str(list(weightgain$source, weightgain$type))
tapply(weightgain$weightgain,list(weightgain$source, weightgain$type), mean)
tapply(weightgain$weightgain, list(weightgain$source, weightgain$type), sd)
print("mean")
tapply(weightgain$weightgain,list(weightgain$source, weightgain$type), mean)
print("standard deviation")
tapply(weightgain$weightgain, list(weightgain$source, weightgain$type), sd)
print("mean":)
print("mean: ")
tapply(weightgain$weightgain,list(weightgain$source, weightgain$type), mean)
print("standard deviation: ")
tapply(weightgain$weightgain, list(weightgain$source, weightgain$type), sd)
View(weightgain)
wg_aov <- aov(weightgain ~ source * type, data = weightgain)
coef(wg_aov)
head(weightgain[19:23,], n=5)
print("mean:")
tapply(weightgain$weightgain,list(weightgain$source, weightgain$type), mean)
print("standard deviation:")
tapply(weightgain$weightgain, list(weightgain$source, weightgain$type), sd)
There seems to be differences on weight gain by the infuences of the two factors, but how can we know if the observed differences aren't from random effect?
To answer this question, we can apply ANOVA to the data. The model *formula* specifies a two-way layout with interaction term between the two factor variables.
plot.design(weightgain)
summary(wg_aov)
#install.packages("HSAUR3")
library("HSAUR3")
data("weightgain", package = "HSAUR3")
head(weightgain[19:23,], n=5)
print("mean:")
tapply(weightgain$weightgain,list(weightgain$source, weightgain$type), mean)
print("standard deviation:")
tapply(weightgain$weightgain, list(weightgain$source, weightgain$type), sd)
wg_aov <- aov(weightgain ~ source * type, data = weightgain)
coef(wg_aov)
plot.design(weightgain)
summary(wg_aov)
interaction.plot(weightgain$type, weightgain$source, weightgain$weightgain)
View(weightgain)
data("foster", package = "HSAUR3")
head(foster, n=5)
View(foster)
head(foster[46:48,], n=4)
summary(aov(weight ~ litgen * motgen, data = foster))
summary(aov(weight ~ motgen * litgen, data = foster))
View(foster)
unique(foster$motgen)
print("Unique mortgen ", unique(foster$motgen))
print("Unique mortgen " + unique(foster$motgen))
unique(foster$motgen)
unique(foster$motgen)
foster_aov <- aov(weight ~ litgen * motgen, data = foster)
foster_hsd <- TukeyHSD(foster_aov, "motgen")
foster_hsd
plot(foster_hsd)
plot.design(foster)
data("water", package = "HSAUR3")
head(water, n=4)
summary(manova(cbind(hardness, mortality) ~ location, data = water), test = "Hotelling-Lawley")
tapply(water$hardness, water$location, mean)
tapply(water$mortality, water$location, mean)
means <- aggregate(skulls[,c("mb", "bh", "bl", "nh")], list(epoch = skulls$epoch), mean)
means
data("skulls", package = "HSAUR3")
head(skulls, n=4)
means <- aggregate(skulls[,c("mb", "bh", "bl", "nh")], list(epoch = skulls$epoch), mean)
means
View(skulls)
pairs(means[,-1],
panel = function(x, y) {
textplot(x, y, levels(skulls$epoch), new = FALSE, cex = 0.8)})
textplot?
?textplot
??textplot
install.packages("textplot")
library("textplot")
ibrary("textplot")
library("textplot")
install.packages("textplot")
install.packages("hplot")
library("hplot")
?textplot
skulls_manova <- manova(cbind(mb, bh, bl, nh) ~ epoch, data = skulls)
summary(skulls_manova, test = "Pillai")
summary(skulls_manova, test = "Wilks")
summary(skulls_manova, test = "Hotelling-Lawley")
summary(skulls_manova, test = "Roy")
summary.aov(skulls_manova)
setwd("C:/Users/yocho/portfolio/case_study/airbnb")
setwd("C:/Users/yocho/portfolio/case_study/airbnb")
packages.required = c("sqldf","ggplot2","dplyr", "lubridate")
#install.packages(packages.required)
lapply(packages.required, library, character.only = TRUE)
###read data
users <- read.csv("users.csv")
listings <- read.csv("listings.csv")
contacts <- read.csv("contacts.csv")
#save entities
guestid <- unique(contacts$id_guest_anon)
hostid <- unique(contacts$id_host_anon)
listingid <- unique(listings$id_listing_anon)
###clean data
#create posix versions of timestamps for datetime calculations
datetimestamps = c("ts_interaction_first","ts_reply_at_first","ts_accepted_at_first","ts_booking_at")
datetimestamps.posix = c("ts_interaction_first_posix","ts_reply_at_first_posix","ts_accepted_at_first_posix","ts_booking_at_posix")
datestamps = c("ds_checkin_first","ds_checkout_first")
datestamps.posix = c("ds_checkin_first_posix","ds_checkout_first_posix")
contacts[datetimestamps] <- sapply(contacts[datetimestamps],as.character)
contacts[datestamps] <- sapply(contacts[datestamps],as.character)
contacts[datetimestamps.posix] <- sapply(contacts[datetimestamps],as.POSIXct,format="%Y-%m-%d%H:%M:%S")
contacts[datestamps.posix] <- sapply(contacts[datestamps],as.POSIXct,format="%Y-%m-%d")
#Day of the week for requested checkin date
contacts$dow_checkin = weekdays(contacts$ds_checkin_first_posix, abbreviate = T)
#Month of the year for requested checkin date
contacts$moy_checkin = month(as.factor(contacts$ds_checkin_first))
#calculating time attributes
contacts$days_duration_requested_stay <- difftime(as.POSIXct(contacts$ds_checkout_first), as.POSIXct(contacts$ds_checkin_first), units=c("days"))
contacts$days_from_first_contact_to_first_checkin <- difftime(as.POSIXct(contacts$ds_checkin_first), as.POSIXct(contacts$ts_interaction_first), units=c("days"))
contacts$minute_from_first_reply_to_accept <- difftime(as.POSIXct(contacts$ts_accepted_at_first,format="%Y-%m-%d%H:%M:%S"), as.POSIXct(contacts$ts_reply_at_first,format="%Y-%m-%d%H:%M:%S"), units=c("mins"))
contacts$minute_from_first_touch_to_reply <- difftime(as.POSIXct(contacts$ts_reply_at_first,format="%Y-%m-%d%H:%M:%S"), as.POSIXct(contacts$ts_interaction_first,format="%Y-%m-%d%H:%M:%S"), units=c("mins"))
#remove negative number of reviews
listings$total_reviews[listings$total_reviews < 0] <- 0
View(contacts)
ts_interaction_first_posix ts_book_at_posix
p1 <- sqldf('select
-- target variable
(case when c.ts_booking_at_posix is null then 0 else 1 end) as target_cat,
(case when c.ts_booking_at_posix is null then null else ts_book_at_posix - ts_interaction_first_posix end) as target_num,
-- reservation related attributes
c.days_duration_requested_stay,
c.m_guests,
c.days_from_first_contact_to_first_checkin,
c.dow_checkin,
c.moy_checkin,
-- guest"s attribute
g.country as guest_country,
g.words_in_user_profile as guest_words_in_profile,
c.guest_user_stage_first,
-- guest"s attribute
h.country as host_country,
h.words_in_user_profile as host_words_in_profile,
-- listing"s attribute
l.room_type,
l.listing_neighborhood,
l.total_reviews,
-- host and guest interaction attribute
c.m_interactions,
c.minute_from_first_reply_to_accept,
c.minute_from_first_touch_to_reply
from contacts c
left join users g on g.id_user_anon = c.id_guest_anon            -- guests
left join users h on h.id_user_anon = c.id_host_anon             -- hosts
left join listings l on l.id_listing_anon = c.id_listing_anon    -- listing
', method = "name__class")
colnames(contacts)
p1 <- sqldf('select
-- target variable
(case when c.ts_booking_at_posix is null then 0 else 1 end) as target_cat,
(case when c.ts_booking_at_posix is null then null else ts_booking_at_posix - ts_interaction_first_posix end) as target_num,
-- reservation related attributes
c.days_duration_requested_stay,
c.m_guests,
c.days_from_first_contact_to_first_checkin,
c.dow_checkin,
c.moy_checkin,
-- guest"s attribute
g.country as guest_country,
g.words_in_user_profile as guest_words_in_profile,
c.guest_user_stage_first,
-- guest"s attribute
h.country as host_country,
h.words_in_user_profile as host_words_in_profile,
-- listing"s attribute
l.room_type,
l.listing_neighborhood,
l.total_reviews,
-- host and guest interaction attribute
c.m_interactions,
c.minute_from_first_reply_to_accept,
c.minute_from_first_touch_to_reply
from contacts c
left join users g on g.id_user_anon = c.id_guest_anon            -- guests
left join users h on h.id_user_anon = c.id_host_anon             -- hosts
left join listings l on l.id_listing_anon = c.id_listing_anon    -- listing
', method = "name__class")
View(p1)
str(p1)
dis_vars = c("dow_checkin","moy_checkin","guest_country","guest_user_stage_first","host_country","room_type","listing_neighborhood")
contacts[dis_vars] <- sapply(contacts[dis_vars],as.factor)
contacts[dis_vars]
dis_vars
dis_vars = c("dow_checkin","moy_checkin","guest_country","guest_user_stage_first","host_country","room_type","listing_neighborhood")
p1[dis_vars] <- sapply(p1[dis_vars],as.factor)
str(p1)
p1[dis_vars]
p1[dis_vars] <- sapply(p1[dis_vars],as.factor)
str(p1)
class(p1$dow_checkin)
p1[dis_vars] <- lapply(p1[dis_vars],as.factor)
str(p1)
p2 <- sqldf('select target_cat, count(*) as count_all_inquiry
from p1
group by target_cat
')
p2
p1_cl = p1[-c("target_num")]
p1_reg = p1[-c("target_cat")]
p1_cl = p1[-c("target_num"),]
p1_cl <- subset(p1, select = -c("target_num"))
p1_reg <- subset(p1, select = -c("target_cat")
col()
colnames(p1_cl)
p1_cl <- subset(p1, select = -c("target_num"))
p1_cl <- p1[, !(colnames(p1) %in% c("target_num"))]
p1_reg <- p1[, !(colnames(p1) %in% c("target_cat"))]
str(p1)
View(p1_cl)
library(corrplot)
corrplot(cor(p1, method = c("spearman")))
str(p1)
corrplot(cor(p1[,c(2,3,4,5,9,12,15:18)], method = c("spearman")))
p1[complete.cases(p1), ]
p1_complete <- p1[complete.cases(p1), ]
corrplot(cor(p1_complete[,c(2,3,4,5,9,12,15:18)], method = c("spearman")))
str(p1_cl)
p1["target_cat"] <- lapply(p1["target_cat"],as.factor)
str(p1)
p1_cl <- p1[, !(colnames(p1) %in% c("target_num"))]
p1_reg <- p1[, !(colnames(p1) %in% c("target_cat"))]
cl_m1 = glm(target_cat ~ .,  family = binomial, data = p1_cl)
summary(cl_m1)
reg_m1 = lm(target_num ~ ., data = p1_reg)
summary(reg_m1)
layout(matrix(1:2, ncol = 2))
cdplot(target_cat ~ days_duration_requested_stay, data = plasma)
cdplot(target_cat ~ m_guests, data = plasma)
layout(matrix(1:2, ncol = 2))
cdplot(target_cat ~ days_duration_requested_stay, data = p1_cl)
cdplot(target_cat ~ m_guests, data = p1_cl)
cdplot(target_cat ~ dow_checkin, data = p1_cl)
layout(matrix(1:3, ncol = 3))
cdplot(target_cat ~ days_duration_requested_stay, data = p1_cl)
cdplot(target_cat ~ m_guests, data = p1_cl)
cdplot(target_cat ~ dow_checkin, data = p1_cl)
library(rpart)
library(rpart.plot)
library("party")
install.packages("party")
cl_tree <- ctree(target_cat ~ ., data = p1_cl)
plot(cl_tree)
cl_tree <- ctree(target_cat ~ ., data = p1_cl)
library("party")
cl_tree <- ctree(target_cat ~ ., data = p1_cl)
plot(cl_tree)
summary(cl_m1)
p1_cl[c("target_cat","days_duration_requested_stay")]
summary(cl_m1)
cl_tree <- ctree(target_cat ~ ., data = p1_cl[c("target_cat","days_duration_requested_stay","m_guests",
"days_from_first_contact_to_first_checkin","dow_checkin",
"moy_checkin","room_type")])
plot(cl_tree)
cl_tree2 <- ctree(target_cat ~ ., data = p1_cl[c("target_cat","days_duration_requested_stay","m_guests",
"days_from_first_contact_to_first_checkin")])
plot(cl_tree2)
cl_tree2 <- ctree(target_cat ~ ., data = p1_cl[c("target_cat","days_duration_requested_stay","m_guests",
"days_from_first_contact_to_first_checkin")])
plot(cl_tree2, gp = gpar(fontsize = 8))
plot(cl_tree2, gp = gpar(fontsize = 5))
plot(cl_tree2, gp = gpar(fontsize = 1))
plot(cl_tree2, gp = gpar(fontsize = 1))
install.packages("printcp")
install.packages("plotcp")
library(plotcp)
library(printcp)
library("printcp")
printcp(cl_tree2)
cl_tree2_rp <- rpart(target_cat ~ ., method="class", data = p1_cl[c("target_cat","days_duration_requested_stay","m_guests",
"days_from_first_contact_to_first_checkin")])
printcp(cl_tree2_rp)
plotcp(cl_tree2_rp) # visualize cross-validation results
summary(cl_tree2_rp) # detailed summary of splits
install.packages("randomForest")
library(randomForest)
p1_cl_rf <- randomForest(target_cat ~ .,   data=p1_cl)
print(p1_cl_rf) # view results
importance(p1_cl_rf) # importance of each predictor
p1_cl_rf <- randomForest(target_cat ~ .,   data=p1_cl)
View(p1_cl)
pl_cl_rf <- p1_cl[, colSums(is.na(p1_cl)) == 0]
p1_cl_rf_fit <- randomForest(target_cat ~ .,  data=pl_cl_rf)
View(p1_cl)
levels(p1_cl$listing_neighborhood)
levels(p1_cl$host_country)
p1_cl_rf_fit <- p1_cl_rf_fit[, !(colnames(p1_cl_rf_fit) %in% c("listing_neighborhood"))]
p1_cl_rf_fit <- randomForest(target_cat ~ .,  data=pl_cl_rf)
p1_cl_rf_fit <- randomForest(target_cat ~ .,  data=pl_cl_rf)
colnams(p1_cl_rf_fit[, !(colnames(p1_cl_rf_fit) %in% c("listing_neighborhood"))])
colnames(p1_cl_rf_fit[, !(colnames(p1_cl_rf_fit) %in% c("listing_neighborhood"))])
pl_cl_rf <- p1_cl[, colSums(is.na(p1_cl)) == 0]
p1_cl_rf <- p1_cl_rf[, !(colnames(p1_cl_rf) %in% c("listing_neighborhood"))]
p1_cl_rf_fit <- randomForest(target_cat ~ .,  data=pl_cl_rf)
colnames(p1_cl_rf)
p1_cl_rf <- p1_cl_rf[, !(colnames(p1_cl_rf) %in% c("listing_neighborhood"))]
pl_cl_rf <- p1_cl[, colSums(is.na(p1_cl)) == 0]
p1_cl_rf <- p1_cl_rf[, !(colnames(p1_cl_rf) %in% c("listing_neighborhood"))]
pl_cl_rf <- p1_cl[, colSums(is.na(p1_cl)) == 0]
View(pl_cl_rf)
pl_cl_rf <- pl_cl_rf[, !(colnames(pl_cl_rf) %in% c("listing_neighborhood"))]
p1_cl_rf_fit <- randomForest(target_cat ~ .,  data=pl_cl_rf)
print(p1_cl_rf) # view results
print(p1_cl_rf_fit) # view results
importance(p1_cl_rf_fit) # importance of each predictor
sort(importance(p1_cl_rf_fit))
str(importance(p1_cl_rf_fit))
data.frame(importance(p1_cl_rf_fit))
sort(data.frame(importance(p1_cl_rf_fit)))
data.frame(importance(p1_cl_rf_fit))
data_frame[order(data.frame(importance(p1_cl_rf_fit))$MeanDecreaseGini,]
order(data.frame(importance(p1_cl_rf_fit))$MeanDecreaseGini
order(data.frame(importance(p1_cl_rf_fit))$MeanDecreaseGini
rf_dd <- data.frame(importance(p1_cl_rf_fit))
rf_dd
colnames(rf_dd)
rf_dd[order(-rf_dd$MeanDecreaseGini),]
head(rf_dd[order(-rf_dd$MeanDecreaseGini),])
library(caret)
set.seed(123)
# create training and test sets
inTrain <- caret::createDataPartition(y = p1_cl$target_cat, p = 0.8, list = FALSE)
# subset
p1_cl_training <- data[inTrain, ]
p1_cl_testing <- data[-inTrain, ]
inTrain <- caret::createDataPartition(y = p1_cl$target_cat, p = 0.8, list = FALSE)
p1_cl_training <- p1_cl[inTrain, ]
p1_cl_testing <- p1_cl[-inTrain, ]
p1_cl_testing
colnames(p1_cl_testing)
colnames(p1_cl_testing[,-c("target_cat")])
p1_cl_testing[,-c("target_cat")]
predictions.rf <- predict(p1_cl_rf_fit, newdata = p1_cl_testing[, !(colnames(p1_cl_testing) %in% c("target_cat"))])
confusionMatrix(predictions.rf, testing$target_cat)
confusionMatrix(predictions.rf, p1_cl_testing$target_cat)
p1_cl_testing$target_cat
confusionMatrix(predictions.rf, p1_cl_testing$target_cat)
varImpPlot(p1_cl_rf_fit, pch = 20, main = "Importance of Variables")
